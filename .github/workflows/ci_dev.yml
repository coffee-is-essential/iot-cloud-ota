name: Deploy to AWS ECS

on:
  push:
    branches:
      - implement-mqtt-handler-ci

env:
  AWS_REGION: ap-northeast-2
  ECR_BACKEND_REPOSITORY: backend
  ECR_EMQX_REPOSITORY: emqx
  ECR_PRIVATE_CA_REPOSITORY: private-ca
  ECR_MQTT_HANDLER_REPOSITORY: mqtt-handler

jobs:
  detect-changes-by-component:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      emqx: ${{ steps.filter.outputs.emqx }}
      private_ca: ${{ steps.filter.outputs.private_ca }}
      mqtt-handler: ${{ steps.filter.outputs.mqtt-handler }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            emqx:
              - 'emqx/**'
            private_ca:
              - 'private_ca/**'
            mqtt-handler:
              - 'mqtt-handler/**'

  ci-backend-dev:
    needs: [detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build-image.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest \
            -f backend/iot-cloud-ota/Dockerfile backend/iot-cloud-ota
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  ci-emqx-dev:
    needs: [detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.emqx == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build-image.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_EMQX_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_EMQX_REPOSITORY:latest \
            -f emqx/Dockerfile emqx
          docker push $ECR_REGISTRY/$ECR_EMQX_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_EMQX_REPOSITORY:latest
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  ci-private-ca-dev:
    needs: [detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.private_ca == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build-image.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_PRIVATE_CA_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_PRIVATE_CA_REPOSITORY:latest \
            -f private_ca/Dockerfile private_ca
          docker push $ECR_REGISTRY/$ECR_EMQX_PRIVATE_CA_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_EMQX_PRIVATE_CA_REPOSITORY:latest
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  ci-mqtt-handler-dev:
    needs: [detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.mqtt-handler == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build-image.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_MQTT_HANDLER_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_MQTT_HANDLER_REPOSITORY:latest \
            -f mqtt-handler/Dockerfile mqtt-handler
          docker push $ECR_REGISTRY/$ECR_MQTT_HANDLER_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_MQTT_HANDLER_REPOSITORY:latest
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  terraform-apply:
    needs: [ci-backend-dev, ci-emqx-dev, ci-private-ca-dev, ci-mqtt-handler-dev]
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        run: terraform init

      - name: Terraform Apply
        env:
          BACKEND_IMAGE: ${{ needs.ci-backend-dev.outputs.tag }}
          EMQX_IMAGE: ${{ needs.ci-emqx-dev.outputs.tag }}
          PRIVATE_CA_IMAGE: ${{ needs.ci-private-ca-dev.outputs.tag }}
          MQTT_HANDLER_IMAGE: ${{ needs.ci-mqtt-handler-dev.outputs.tag }}
        run: |
          image_tags=""
          if [ -n "$BACKEND_IMAGE" ]; then
            image_tags="$image_tags -var backend_image_tag=$BACKEND_IMAGE"
          fi
          if [ -n "$EMQX_IMAGE" ]; then
            image_tags="$image_tags -var emqx_image_tag=$EMQX_IMAGE"
          fi
          if [ -n "$PRIVATE_CA_IMAGE" ]; then
            image_tags="$image_tags -var private_ca_image_tag=$PRIVATE_CA_IMAGE"
          fi
          if [ -n "$MQTT_HANDLER_IMAGE" ]; then
            image_tags="$image_tags -var mqtt_handler_image_tag=$MQTT_HANDLER_IMAGE"
          fi

          echo "Applying Terraform with images: $image_tags"
          terraform apply -auto-approve $image_tags
